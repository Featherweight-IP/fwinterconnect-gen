
    axi4_interconnect_NxN #(
    .AXI4_ADDRESS_WIDTH(${addr-width}),
    .AXI4_DATA_WIDTH(${data-width}),
    .AXI4-ID_WIDTH(${id-width}),
    .N_MASTERS(${n-targets}),
    .N_SLAVES(${n-initiators})
    ) ${name} (
    .clock(clock),
    .reset(reset),
    .AWADDR(${name}_AWADDR),
    .AWID(${name}_AWID),
    .AWLEN(${name}_AWLEN),
    .AWSIZE(${name}_AWSIZE),
    input[1:0]									AWBURST[N_MASTERS-1:0],
    input  										AWLOCK[N_MASTERS-1:0],
    input[3:0]									AWCACHE[N_MASTERS-1:0],
    input[2:0]									AWPROT[N_MASTERS-1:0],
    input[3:0]									AWQOS[N_MASTERS-1:0],
    input[3:0]									AWREGION[N_MASTERS-1:0],
    output										AWREADY[N_MASTERS-1:0],
    input										AWVALID[N_MASTERS-1:0],

    input[AXI4_ADDRESS_WIDTH-1:0]				ARADDR[N_MASTERS-1:0],
    input[AXI4_ID_WIDTH-1:0]					ARID[N_MASTERS-1:0],
    input[7:0]									ARLEN[N_MASTERS-1:0],
    input[2:0]									ARSIZE[N_MASTERS-1:0],
    input[1:0]									ARBURST[N_MASTERS-1:0],
    input     									ARLOCK[N_MASTERS-1:0],
    input[3:0]									ARCACHE[N_MASTERS-1:0],
    input[2:0]									ARPROT[N_MASTERS-1:0],
    input[3:0]									ARQOS[N_MASTERS-1:0],
    input[3:0]									ARREGION[N_MASTERS-1:0],
    output										ARREADY[N_MASTERS-1:0],
    input										ARVALID[N_MASTERS-1:0],
	
    output[AXI4_ID_WIDTH-1:0]					BID[N_MASTERS-1:0],
    output[1:0]									BRESP[N_MASTERS-1:0],
    output										BVALID[N_MASTERS-1:0],
    input										BREADY[N_MASTERS-1:0],

    input[AXI4_ID_WIDTH+N_MASTERID_BITS-1:0]	RID[N_MASTERS-1:0],
    input[AXI4_DATA_WIDTH-1:0]					RDATA[N_MASTERS-1:0],
    input[1:0]									RRESP[N_MASTERS-1:0],
    input										RLAST[N_MASTERS-1:0],
    input										RVALID[N_MASTERS-1:0],
    input										RREADY[N_MASTERS-1:0],
		
    input[(AXI4_DATA_WIDTH-1):0]				WDATA[N_MASTERS-1:0],
    input[((AXI4_DATA_WIDTH/8)-1):0]			WSTRB[N_MASTERS-1:0],
    input										WLAST[N_MASTERS-1:0],
    input										WVALID[N_MASTERS-1:0],
    output										WREADY[N_MASTERS-1:0],
	
    // Slave interface
    output[AXI4_ADDRESS_WIDTH-1:0]				SAWADDR[N_SLAVES:0],
    output[AXI4_ID_WIDTH+N_MASTERID_BITS-1:0]	SAWID[N_SLAVES:0],
    output[7:0]									SAWLEN[N_SLAVES:0],
    output[2:0]									SAWSIZE[N_SLAVES:0],
    output[1:0]									SAWBURST[N_SLAVES:0],
    output     									SAWLOCK[N_SLAVES:0],
    output[3:0]									SAWCACHE[N_SLAVES:0],
    output[2:0]									SAWPROT[N_SLAVES:0],
    output[3:0]									SAWQOS[N_SLAVES:0],
    output[3:0]									SAWREGION[N_SLAVES:0],
    output										SAWREADY[N_SLAVES:0],
    output										SAWVALID[N_SLAVES:0],
    output[(AXI4_DATA_WIDTH-1):0]						SWDATA[N_SLAVES:0],
    output[((AXI4_DATA_WIDTH/8)-1):0]					SWSTRB[N_SLAVES:0],
    output										SWLAST[N_SLAVES:0],
    output										SWVALID[N_SLAVES:0],
    input										SWREADY[N_SLAVES:0],
	
    input[AXI4_ID_WIDTH+N_MASTERID_BITS-1:0]	SBID[N_SLAVES:0],
    input[1:0]									SBRESP[N_SLAVES:0],
    input										SBVALID[N_SLAVES:0],
    output										SBREADY[N_SLAVES:0],
	
    output[AXI4_ADDRESS_WIDTH-1:0]				SARADDR[N_SLAVES:0],
    output[AXI4_ID_WIDTH+N_MASTERID_BITS-1:0]	SARID[N_SLAVES:0],
    output[7:0]									SARLEN[N_SLAVES:0],
    output[2:0]									SARSIZE[N_SLAVES:0],
    output[1:0]									SARBURST[N_SLAVES:0],
    output     									SARLOCK[N_SLAVES:0],
    output[3:0]									SARCACHE[N_SLAVES:0],
    output[2:0]									SARPROT[N_SLAVES:0],
    output[3:0]									SARQOS[N_SLAVES:0],
    output[3:0]									SARREGION[N_SLAVES:0],
    input										SARREADY[N_SLAVES:0],
    output										SARVALID[N_SLAVES:0],	
	
    input[AXI4_ID_WIDTH+N_MASTERID_BITS-1:0]	SRID[N_SLAVES:0],
    input[AXI4_DATA_WIDTH-1:0]					SRDATA[N_SLAVES:0],
    input[1:0]									SRRESP[N_SLAVES:0],
    input										SRLAST[N_SLAVES:0],
    input										SRVALID[N_SLAVES:0],
    output										SRREADY[N_SLAVES:0]    	
    );